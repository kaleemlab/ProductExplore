{"ast":null,"code":"import NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar ImageResizerAndroid = NativeModules.ImageResizerAndroid;\nvar exportObject = {};\n\nfunction validateOptions(options) {\n  var mode = options.mode || 'contain';\n  var possibleModes = ['contain', 'cover', 'stretch'];\n\n  if (possibleModes.indexOf(mode) === -1) {\n    throw new Error(\"createResizedImage's options.mode must be one of \\\"\" + possibleModes.join('\", \"') + \"\\\"\");\n  }\n\n  if (options.onlyScaleDown && typeof options.onlyScaleDown !== 'boolean') {\n    throw new Error(\"createResizedImage's option.onlyScaleDown must be a boolean: got \" + options.onlyScaleDown);\n  }\n\n  return {\n    mode: mode,\n    onlyScaleDown: !!options.onlyScaleDown\n  };\n}\n\nif (Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: function createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n      var validatedOptions = validateOptions(options);\n      return new Promise(function (resolve, reject) {\n        ImageResizerAndroid.createResizedImage(imagePath, newWidth, newHeight, compressFormat, quality, rotation, outputPath, keepMeta, validatedOptions, resolve, reject);\n      });\n    }\n  };\n} else {\n  exportObject = {\n    createResizedImage: function createResizedImage(path, width, height, format, quality) {\n      var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var outputPath = arguments.length > 6 ? arguments[6] : undefined;\n      var keepMeta = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var options = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : {};\n\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n\n      var validatedOptions = validateOptions(options);\n      return new Promise(function (resolve, reject) {\n        NativeModules.ImageResizer.createResizedImage(path, width, height, format, quality, rotation, outputPath, keepMeta, validatedOptions, function (err, response) {\n          if (err) {\n            return reject(err);\n          }\n\n          resolve(response);\n        });\n      });\n    }\n  };\n}\n\nexport default exportObject;","map":{"version":3,"sources":["/Users/mac/Desktop/expo-boilerplate-main/node_modules/react-native-image-resizer/index.js"],"names":["ImageResizerAndroid","NativeModules","exportObject","validateOptions","options","mode","possibleModes","indexOf","Error","join","onlyScaleDown","Platform","OS","createResizedImage","imagePath","newWidth","newHeight","compressFormat","quality","rotation","outputPath","keepMeta","validatedOptions","Promise","resolve","reject","path","width","height","format","ImageResizer","err","response"],"mappings":";;AAEA,IAAMA,mBAAmB,GAAGC,aAAa,CAACD,mBAA1C;AAEA,IAAIE,YAAY,GAAG,EAAnB;;AAGA,SAASC,eAAT,CAAyBC,OAAzB,EAAkC;AAChC,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAR,IAAgB,SAA7B;AACA,MAAMC,aAAa,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,SAArB,CAAtB;;AACA,MAAIA,aAAa,CAACC,OAAd,CAAsBF,IAAtB,MAAgC,CAAC,CAArC,EAAwC;AACtC,UAAM,IAAIG,KAAJ,yDAA+DF,aAAa,CAACG,IAAd,CAAmB,MAAnB,CAA/D,QAAN;AACD;;AAED,MAAIL,OAAO,CAACM,aAAR,IAAyB,OAAON,OAAO,CAACM,aAAf,KAAiC,SAA9D,EAAyE;AACvE,UAAM,IAAIF,KAAJ,uEAA+EJ,OAAO,CAACM,aAAvF,CAAN;AACD;;AAED,SAAO;AACLL,IAAAA,IAAI,EAAJA,IADK;AAELK,IAAAA,aAAa,EAAE,CAAC,CAACN,OAAO,CAACM;AAFpB,GAAP;AAID;;AAED,IAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BV,EAAAA,YAAY,GAAG;AACbW,IAAAA,kBAAkB,EAAE,4BAClBC,SADkB,EAElBC,QAFkB,EAGlBC,SAHkB,EAIlBC,cAJkB,EAKlBC,OALkB,EAUf;AAAA,UAJHC,QAIG,uEAJQ,CAIR;AAAA,UAHHC,UAGG;AAAA,UAFHC,QAEG,uEAFQ,KAER;AAAA,UADHjB,OACG,uEADO,EACP;AACH,UAAMkB,gBAAgB,GAAGnB,eAAe,CAACC,OAAD,CAAxC;AAEA,aAAO,IAAImB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCzB,QAAAA,mBAAmB,CAACa,kBAApB,CACEC,SADF,EAEEC,QAFF,EAGEC,SAHF,EAIEC,cAJF,EAKEC,OALF,EAMEC,QANF,EAOEC,UAPF,EAQEC,QARF,EASEC,gBATF,EAUEE,OAVF,EAWEC,MAXF;AAaD,OAdM,CAAP;AAeD;AA7BY,GAAf;AA+BD,CAhCD,MAgCO;AACLvB,EAAAA,YAAY,GAAG;AACbW,IAAAA,kBAAkB,EAAE,4BAClBa,IADkB,EAElBC,KAFkB,EAGlBC,MAHkB,EAIlBC,MAJkB,EAKlBX,OALkB,EAUf;AAAA,UAJHC,QAIG,uEAJQ,CAIR;AAAA,UAHHC,UAGG;AAAA,UAFHC,QAEG,uEAFQ,KAER;AAAA,UADHjB,OACG,uEADO,EACP;;AACH,UAAIyB,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EAA2C;AACzC,cAAM,IAAIrB,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,UAAMc,gBAAgB,GAAGnB,eAAe,CAACC,OAAD,CAAxC;AAEA,aAAO,IAAImB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCxB,QAAAA,aAAa,CAAC6B,YAAd,CAA2BjB,kBAA3B,CACEa,IADF,EAEEC,KAFF,EAGEC,MAHF,EAIEC,MAJF,EAKEX,OALF,EAMEC,QANF,EAOEC,UAPF,EAQEC,QARF,EASEC,gBATF,EAUE,UAACS,GAAD,EAAMC,QAAN,EAAmB;AACjB,cAAID,GAAJ,EAAS;AACP,mBAAON,MAAM,CAACM,GAAD,CAAb;AACD;;AAEDP,UAAAA,OAAO,CAACQ,QAAD,CAAP;AACD,SAhBH;AAkBD,OAnBM,CAAP;AAoBD;AAtCY,GAAf;AAwCD;;AAED,eAAe9B,YAAf","sourcesContent":["import { NativeModules, Platform } from 'react-native';\n\nconst ImageResizerAndroid = NativeModules.ImageResizerAndroid;\n\nlet exportObject = {};\n\n/** Validate `options` object: used by both Android and iOS entry points */\nfunction validateOptions(options) {\n  const mode = options.mode || 'contain';\n  const possibleModes = ['contain', 'cover', 'stretch'];\n  if (possibleModes.indexOf(mode) === -1) {\n    throw new Error(`createResizedImage's options.mode must be one of \"${possibleModes.join('\", \"')}\"`);\n  }\n\n  if (options.onlyScaleDown && typeof options.onlyScaleDown !== 'boolean') {\n    throw new Error(`createResizedImage\\'s option.onlyScaleDown must be a boolean: got ${options.onlyScaleDown}`);\n  }\n\n  return {\n    mode,\n    onlyScaleDown: !!options.onlyScaleDown,\n  };\n}\n\nif (Platform.OS === 'android') {\n  exportObject = {\n    createResizedImage: (\n      imagePath,\n      newWidth,\n      newHeight,\n      compressFormat,\n      quality,\n      rotation = 0,\n      outputPath,\n      keepMeta = false,\n      options = {}\n    ) => {\n      const validatedOptions = validateOptions(options);\n  \n      return new Promise((resolve, reject) => {\n        ImageResizerAndroid.createResizedImage(\n          imagePath,\n          newWidth,\n          newHeight,\n          compressFormat,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          validatedOptions,\n          resolve,\n          reject\n        );\n      });\n    },\n  };\n} else {\n  exportObject = {\n    createResizedImage: (\n      path,\n      width,\n      height,\n      format,\n      quality,\n      rotation = 0,\n      outputPath,\n      keepMeta = false,\n      options = {}\n    ) => {\n      if (format !== 'JPEG' && format !== 'PNG') {\n        throw new Error('Only JPEG and PNG format are supported by createResizedImage');\n      }\n  \n      const validatedOptions = validateOptions(options);\n  \n      return new Promise((resolve, reject) => {\n        NativeModules.ImageResizer.createResizedImage(\n          path,\n          width,\n          height,\n          format,\n          quality,\n          rotation,\n          outputPath,\n          keepMeta,\n          validatedOptions,\n          (err, response) => {\n            if (err) {\n              return reject(err);\n            }\n  \n            resolve(response);\n          }\n        );\n      });\n    },\n  };\n}\n\nexport default exportObject;\n"]},"metadata":{},"sourceType":"module"}